name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache mypdns requests
          echo "My Privacy DNS Rules the blacklists"

      - name: Install build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build

      - name: Compile code
        run: |
          mkdir -p build _c_make_files/
          cd build
          cmake -G Ninja ..
          ninja

      - name: Run tests
        run: |
          ./build/ptcheck -p _toolboxtest. mypdns.cloud 0892437f0b275870223e0fce4bded7d0978ad5b240e61515520d40081ee2ada3b621bbc6512e4cf3c73c500e45ab23aa2b37b409825a5fb7c49b50dc977b5bde

      - name: Update version and changelog
        run: python update_version_changelog.py

      - name: Extract version
        id: extract_version
        run: |
          VERSION=$(python -c 'from update_version_changelog import get_current_version; print(get_current_version())') #-${{ github.run_number }}
          if [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+-[0-9]+$ ]]; then
            echo "VERSION=$VERSION" >> $GITHUB_ENV
          else
            echo "Invalid version format: $VERSION"
            exit 1
          fi

      - name: Create and push a new release
        if: ${{ success() && github.ref == 'refs/heads/master' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "${{ secrets.GH_USER }}"
          git config --global user.email "${{ secrets.GH_EMAIL }}"
          git add version.h CHANGELOG.md
          git commit -m "Release $VERSION"
          git tag -a "v$VERSION" -m "Release $VERSION"
          git push origin --tags
          git push origin master

      - name: Create GitHub Release
        if: ${{ success() && github.ref == 'refs/heads/master' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v$VERSION"
          release_name: "Release $VERSION"
          body: "Release of version $VERSION"
          draft: false
          prerelease: false